set-option global grepcmd 'ag --column'
# set-option global ui_options ncurses_assistant=none

colorscheme default

add-highlighter global/ show-matching

set-face global search +bi
# add-highlighter global/ dynregex '%reg{/}' 0:+u

# Add magenta color column
add-highlighter global/ column '%opt{autowrap_column}' default,magenta

# Enable once characters are fixed
hook global WinCreate ^[^*]+$ %{ add-highlighter window/ number-lines -hlcursor }

# Enable editor config
hook global BufOpenFile .* %{ editorconfig-load }
hook global BufNewFile  .* %{ editorconfig-load }

# System clipboard handling
evaluate-commands %sh{
    copy="xclip -sel clip -i"
    paste="xclip -sel clip -o"
    printf "map global user -docstring 'paste (after) from clipboard' p '!%s<ret>'\n" "$paste"
    printf "map global user -docstring 'paste (before) from clipboard' P '<a-!>%s<ret>'\n" "$paste"
    printf "map global user -docstring 'yank to clipboard' y '<a-|>%s<ret>:echo -markup %%{{Information}copied selection to X11 clipboard}<ret>'\n" "$copy"
    printf "map global user -docstring 'replace from clipboard' R '|%s<ret>'\n" "$paste"
}

# Automatically expand tabs
hook global InsertChar \t %{ exec -draft -itersel h@ }

# Set default indentation to 4 spaces
set global tabstop 4
set global indentwidth 4

hook global WinSetOption filetype=haskell %{
    ctags-enable-autoinfo
    set global tabstop 2
    set global indentwidth 2
}

# Make x and X extend selection down and up a line respectively
def -params 1 extend-line-down %{
    exec "<a-:>%arg{1}X"
}
def -params 1 extend-line-up %{
    exec "<a-:><a-;>%arg{1}K<a-;>"
    try %{
        exec -draft ';<a-K>\n<ret>'
        exec X
    }
    exec '<a-;><a-X>'
}
map global normal x ':extend-line-down %val{count}<ret>'
map global normal X ':extend-line-up %val{count}<ret>'

map global normal = ':prompt math: %{exec "a%val{text}<lt>esc>|bc<lt>ret>"}<ret>'

# Load local kakrc if it exists
evaluate-commands %sh{ [ -f $kak_config/local.kak ] && echo "source $kak_config/local.kak" }
